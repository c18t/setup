---
- name: assert vscode vscode_extensions
  assert:
    that: >
      vscode_extensions is not defined or
        (vscode_extensions is string and vscode_extensions != '')
    quiet: true

- name: include vscode vscode_extensions
  block:
    - name: 'include roles/vscode/vars/{{ vscode_extensions }}'
      include_vars: '{{ vscode_extensions }}'
    - name: assert code_install_extensions
      assert:
        that: code_install_extensions is defined and code_install_extensions is iterable
        quiet: true
  when: vscode_extensions is defined

- name: assert vscode_confing
  assert:
    that: vscode_confing is string and vscode_confing != ''
    quiet: true

- name: settings for Windows
  block:
    - name: check vscode (for Windows)
      win_shell: gcm code -ErrorAction SilentlyContinue
      register: type_code
      failed_when: type_code.rc not in [0, 1, 126, 127]
      changed_when: false
      check_mode: false

    - name: install vscode extensions (for Windows)
      win_shell: if (-Not(code --install-extension {{ item }} | Select-String -Pattern "successfully installed")) { exit 1; }
      register: install_vscode_ex
      failed_when: install_vscode_ex.rc not in [0, 1]
      changed_when: install_vscode_ex.rc == 0
      with_items: '{{ code_install_extensions }}'
      when: type_code.rc == 0 and code_install_extensions | length > 0

    - name: make setting directory (for Windows)
      win_file:
        state: directory
        path: '{{ item }}'
      with_items:
        - '{{ my_xdg_cache_home }}\Code\User'

    - name: link to settings.json (for Windows)
      become: true
      win_shell: >-
        if (-Not(Test-Path "{{ item.dest }}")) {
          New-Item -Type SymbolicLink -Value "{{ item.path }}" -Path "{{ item.dest }}"; exit 2
        }
      register: make_link
      failed_when: make_link.rc not in [0, 2]
      changed_when: make_link.rc == 2
      with_items:
        # setting.json
        - path: '{{ dotfiles }}\vscode\{{ vscode_confing }}'
          dest: '{{ my_xdg_cache_home }}\Code\User\settings.json'
  when: ansible_os_family == "Windows"

- name: settings for MacOSX
  block:
    - name: check vscode (for MacOSX)
      shell: type code
      register: type_code
      failed_when: type_code.rc not in [0, 1, 126, 127]
      changed_when: false
      check_mode: false

    - name: install vscode extensions (for MacOSX)
      shell: 'code --install-extension {{ item }} | grep -iq "successfully installed"'
      register: install_vscode_ex
      failed_when: install_vscode_ex.rc not in [0, 1]
      changed_when: install_vscode_ex.rc == 0
      with_items: '{{ code_install_extensions }}'
      # GitHub Actionsだと拡張のインストールで止まるのでスキップ
      when: >
        (ansible_env.GITHUB_ACTIONS is not defined
          or ansible_env.GITHUB_ACTIONS != 'true')
          and
        type_code.rc == 0 and code_install_extensions | length > 0

    - name: make setting directory (for MacOSX)
      file:
        state: directory
        follow: true
        path: '{{ item }}'
      with_items:
        - '{{ home }}/Library/Application Support/Code/User'

    - name: link to settings.json (for MacOSX)
      become: true
      file:
        state: link
        follow: false
        force: true
        owner: '{{ user }}'
        src: '{{ item.path }}'
        dest: '{{ item.dest }}'
      with_items:
        # setting.json
        - path: '{{ dotfiles }}/vscode/{{ vscode_confing }}'
          dest: '{{ home }}/Library/Application Support/Code/User/settings.json'
  when: ansible_distribution == "MacOSX"
