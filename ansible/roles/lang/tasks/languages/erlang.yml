---
- name: assert erlang_versions
  assert:
    that: erlang_versions is not defined or erlang_versions is iterable
    quiet: true

- name: check erlenv
  shell: fish -l -c "anyenv envs | grep -qe \^erlenv\\\$"
  register: check_erlenv
  failed_when: false
  changed_when: false
  check_mode: false

- name: install erlenv
  shell: fish -l -c "anyenv install --skip-existing erlenv"
  when: check_erlenv.rc != 0
  notify: update_global_path

- name: install erlang version
  block:
    - name: get installed erlang version list
      shell: fish -l -c "erlenv releases"
      register: installed_erlang_version
      failed_when: installed_erlang_version.rc not in [0, 1]
      changed_when: false
      check_mode: false

    - name: install erlang version
      shell: >-
        fish -l -c "cd {{ home }};
          and curl -Lo otp_src_{{ item.version }}.tar.gz {{ item.source }};
          and tar zxf otp_src_{{ item.version }}.tar.gz;
          and cd otp_src_{{ item.version }};
          and ./configure --prefix={{ home }}/.anyenv/envs/erlenv/releases/{{ item.version }} {{ erlang_option }};
          and make {{ erlang_make_arguments }};
          and make install;
          and cd ../;
          and rm -rf ./otp_src_{{ item.version }};
          and rm -f otp_src_{{ item.version }}.tar.gz;"
      when: installed_erlang_version.stdout is not regex("\\b"+item.version+"\\b")
      loop: '{{ erlang_versions }}'

    - name: 'check global erlang version {{ erlang_versions[0].version }}'
      shell: fish -l -c "erlenv global | grep -qe \^{{ erlang_versions[0].version }}\\\$"
      register: check_erlenv_version
      failed_when: check_erlenv_version.rc not in [0, 1]
      changed_when: false
      check_mode: false

    - name: 'set global erlang version {{ erlang_versions[0].version }}'
      shell: fish -l -c "erlenv global {{ erlang_versions[0].version }}"
      when: check_erlenv_version.rc != 0
  when: erlang_versions is defined and erlang_versions | length > 0
