---
- name: assert golang_versions
  assert:
    that: golang_versions is not defined or golang_versions is iterable
    quiet: true

- name: add $GOPATH/bin to fish_user_paths
  shell: >-
    set -e -g GOPATH;
    [ -n "$GOPATH" ];
      and not contains "$GOPATH/bin" $fish_user_paths;
      and set -U --append fish_user_paths "$GOPATH/bin"
  args:
    executable: '{{ fish_path }}'
  register: add_gopath
  failed_when: add_gopath.rc not in [0, 1]
  changed_when: add_gopath.rc == 0
  notify: update_global_path

- name: set GOENV_GOPATH_PREFIX
  shell: set -Ux GOENV_GOPATH_PREFIX {{ home }}/.go
  args:
    executable: '{{ fish_path }}'
  changed_when: false
  check_mode: false

- name: check goenv
  shell: fish -l -c "anyenv envs | grep -qe \^goenv\\\$"
  register: check_goenv
  failed_when: check_goenv.rc not in [0, 1]
  changed_when: false
  check_mode: false

- name: install goenv
  shell: fish -l -c "anyenv install --skip-existing goenv"
  when: check_goenv.rc != 0
  notify: update_global_path

- name: install go version
  block:
    - name: get installed go version list
      shell: fish -l -c "goenv versions"
      register: installed_go_version
      failed_when: installed_go_version.rc not in [0, 1]
      changed_when: false
      check_mode: false

    - name: install go version
      shell: fish -l -c "goenv install {{ item }}"
      when: installed_go_version.stdout is not regex("\\b"+item+"\\b")
      loop: '{{ golang_versions }}'

    - name: 'check global go version {{ golang_versions[0] }}'
      shell: fish -l -c "goenv global | grep -qe \^{{ golang_versions[0] }}\\\$"
      register: check_goenv_version
      failed_when: check_goenv_version.rc not in [0, 1]
      changed_when: false
      check_mode: false

    - name: 'set global go version {{ golang_versions[0] }}'
      shell: fish -l -c "goenv global {{ golang_versions[0] }}"
      when: check_goenv_version.rc != 0
  when: golang_versions is defined and golang_versions | length > 0
